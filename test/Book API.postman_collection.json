{
	"info": {
		"_postman_id": "6e58496e-a7d0-4019-bbd2-63f1e8091d11",
		"name": "Book API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get books",
			"item": [
				{
					"name": "Get all books successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5011e3e0-44f9-4baf-82fa-467e226ff914",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response books value is not an empty array\", () => {",
									"    pm.expect(jsonData.books).to.be.an(\"array\");",
									"    pm.expect(jsonData.books).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response contains created book\", () => {",
									"    const newBookExists = jsonData.books.some(book => book._id === pm.environment.get(\"CreatedBookId\"));",
									"    pm.expect(newBookExists).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7b4724c2-702b-48cd-84d5-f058cc749e30",
								"exec": [
									"const body = {",
									"    \"bookId\": 5,",
									"    \"title\": \"Of Mice and Men\",",
									"    \"author\": \"John Steinbeck\",",
									"    \"year\": 1937",
									"};",
									"",
									"const options = {",
									"    url: pm.environment.get(\"BaseUrl\"),",
									"    method: \"POST\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\"",
									"    },",
									"    body: {",
									"        mode: \"raw\",",
									"        raw: JSON.stringify(body)",
									"    }",
									"};",
									"",
									"pm.sendRequest(options, (err, response) => {",
									"    const createdId = response.headers.get(\"Location\").slice(1);",
									"    pm.environment.set(\"CreatedBookId\", createdId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}",
							"host": [
								"{{BaseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all books with certain bookId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5011e3e0-44f9-4baf-82fa-467e226ff914",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response books value is not an empty array\", () => {",
									"    pm.expect(jsonData.books).to.be.an(\"array\");",
									"    pm.expect(jsonData.books).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response books array only contains books with the correct bookId\", () => {",
									"    const newBookExists = jsonData.books.all(book => book.bookId === 5);",
									"    pm.expect(newBookExists).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}?bookId=5",
							"host": [
								"{{BaseUrl}}"
							],
							"query": [
								{
									"key": "bookId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all books with certain title",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5011e3e0-44f9-4baf-82fa-467e226ff914",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response books value is not an empty array\", () => {",
									"    pm.expect(jsonData.books).to.be.an(\"array\");",
									"    pm.expect(jsonData.books).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response books array only contains books with the correct title\", () => {",
									"    const newBookExists = jsonData.books.all(book => book.title === \"Of Mice and Men\");",
									"    pm.expect(newBookExists).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}?title=Of Mice and Men",
							"host": [
								"{{BaseUrl}}"
							],
							"query": [
								{
									"key": "title",
									"value": "Of Mice and Men"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all books with certain author",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5011e3e0-44f9-4baf-82fa-467e226ff914",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response books value is not an empty array\", () => {",
									"    pm.expect(jsonData.books).to.be.an(\"array\");",
									"    pm.expect(jsonData.books).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response books array only contains books with the correct author\", () => {",
									"    const newBookExists = jsonData.books.all(book => book.author === \"John Steinbeck\");",
									"    pm.expect(newBookExists).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}?author=John Steinbeck",
							"host": [
								"{{BaseUrl}}"
							],
							"query": [
								{
									"key": "author",
									"value": "John Steinbeck"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all books with certain year",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5011e3e0-44f9-4baf-82fa-467e226ff914",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response books value is not an empty array\", () => {",
									"    pm.expect(jsonData.books).to.be.an(\"array\");",
									"    pm.expect(jsonData.books).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response books array only contains books with the correct year\", () => {",
									"    const newBookExists = jsonData.books.all(book => book.year === 1937);",
									"    pm.expect(newBookExists).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}?year=1937",
							"host": [
								"{{BaseUrl}}"
							],
							"query": [
								{
									"key": "year",
									"value": "1937"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all books with certain author and year",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5011e3e0-44f9-4baf-82fa-467e226ff914",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response books value is not an empty array\", () => {",
									"    pm.expect(jsonData.books).to.be.an(\"array\");",
									"    pm.expect(jsonData.books).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response books array only contains books with the correct author and year\", () => {",
									"    const newBookExists = jsonData.books.all(book => book.author === \"John Steinbeck\" && book.year === 1937);",
									"    pm.expect(newBookExists).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}?author=John Steinbeck&year=1937",
							"host": [
								"{{BaseUrl}}"
							],
							"query": [
								{
									"key": "author",
									"value": "John Steinbeck"
								},
								{
									"key": "year",
									"value": "1937"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all books with invalid bookId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5011e3e0-44f9-4baf-82fa-467e226ff914",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is the error message\", () => {",
									"    pm.response.to.have.body('Invalid query string\\n');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}?bookId=NaN",
							"host": [
								"{{BaseUrl}}"
							],
							"query": [
								{
									"key": "bookId",
									"value": "NaN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all books with invalid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5011e3e0-44f9-4baf-82fa-467e226ff914",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is the error message\", () => {",
									"    pm.response.to.have.body('Invalid query string\\n');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}?year=NaN",
							"host": [
								"{{BaseUrl}}"
							],
							"query": [
								{
									"key": "year",
									"value": "NaN"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Get book",
			"item": [
				{
					"name": "Get book successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a25fecc-35b1-40d9-8ef1-66931d46bd28",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response body is an object\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData).to.not.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Response body is the correct book\", () => {",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"CreatedBookId\"));",
									"});",
									"",
									"pm.test(\"Location header is present\", () => {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"Location header has the correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(`/${pm.environment.get(\"CreatedBookId\")}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/{{CreatedBookId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{CreatedBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get book with unused id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a25fecc-35b1-40d9-8ef1-66931d46bd28",
								"exec": [
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is the error message\", () => {",
									"    pm.response.to.have.body('No book found with that id\\n');",
									"});",
									"",
									"pm.test(\"Location header is not present\", () => {",
									"    pm.response.to.not.have.header(\"Location\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/1",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create book",
			"item": [
				{
					"name": "Create book successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e6e84b9-5f50-4785-b515-c3e5d96e1b3e",
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body is json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response body is an object\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData).to.not.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Response body has an _id field and value\", () => {",
									"    pm.expect(jsonData._id).to.not.be.undefined;",
									"    pm.expect(jsonData._id).to.not.be.null;",
									"});",
									"",
									"pm.test(\"Response body has correct bookId value\", () => {",
									"    pm.expect(jsonData.bookId).to.eql(6);",
									"});",
									"",
									"pm.test(\"Response body has correct title value\", () => {",
									"    pm.expect(jsonData.title).to.eql(\"Jane Eyre\");",
									"});",
									"",
									"pm.test(\"Response body has correct author value\", () => {",
									"    pm.expect(jsonData.author).to.eql(\"Charlotte Brontë\");",
									"});",
									"",
									"pm.test(\"Response body has correct year value\", () => {",
									"    pm.expect(jsonData.year).to.eql(1847);",
									"});",
									"",
									"pm.test(\"Location header is present\", () => {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"Location header has the correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(`/${jsonData._id}`);",
									"});",
									"",
									"pm.environment.set(\"CreatedBookId\", jsonData._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"bookId\": 6,\n    \"title\": \"Jane Eyre\",\n    \"author\": \"Charlotte Brontë\",\n    \"year\": 1847\n}"
						},
						"url": {
							"raw": "{{BaseUrl}}",
							"host": [
								"{{BaseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create book with bad input",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e6e84b9-5f50-4785-b515-c3e5d96e1b3e",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is the error message\", () => {",
									"    pm.response.to.have.body('Invalid request body\\n');",
									"});",
									"",
									"pm.test(\"Location header is not present\", () => {",
									"    pm.response.to.not.have.header(\"Location\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "Not json"
						},
						"url": {
							"raw": "{{BaseUrl}}",
							"host": [
								"{{BaseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update book fully",
			"item": [
				{
					"name": "Update book fully successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97bc1f32-33b7-4faa-b50d-1ee455db40b9",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response body is an object\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData).to.not.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Response body has correct _id value\", () => {",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"CreatedBookId\"));",
									"});",
									"",
									"pm.test(\"Response body has correct bookId value\", () => {",
									"    pm.expect(jsonData.bookId).to.eql(7);",
									"});",
									"",
									"pm.test(\"Response body has correct title value\", () => {",
									"    pm.expect(jsonData.title).to.eql(\"The Giver\");",
									"});",
									"",
									"pm.test(\"Response body has correct author value\", () => {",
									"    pm.expect(jsonData.author).to.eql(\"Lois Lowry\");",
									"});",
									"",
									"pm.test(\"Response body has correct year value\", () => {",
									"    pm.expect(jsonData.year).to.eql(1993);",
									"});",
									"",
									"pm.test(\"Location header is present\", () => {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"Location header has the correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(`/${pm.environment.get(\"CreatedBookId\")}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": 7,\n    \"title\": \"The Giver\",\n    \"author\": \"Lois Lowry\",\n    \"year\": 1993\n}"
						},
						"url": {
							"raw": "{{BaseUrl}}/{{CreatedBookId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{CreatedBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update book fully with bad input",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97bc1f32-33b7-4faa-b50d-1ee455db40b9",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is the error message\", () => {",
									"    pm.response.to.have.body('Invalid request body\\n');",
									"});",
									"",
									"pm.test(\"Location header is not present\", () => {",
									"    pm.response.to.not.have.header(\"Location\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "Not json"
						},
						"url": {
							"raw": "{{BaseUrl}}/{{CreatedBookId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{CreatedBookId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update book partially",
			"item": [
				{
					"name": "Update book partially successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1589791a-d9ef-4ad1-add9-3aa3091d79c7",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is empty\", () => {",
									"    pm.response.to.have.body(\"\");",
									"});",
									"",
									"pm.test(\"Location header is present\", () => {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"Location header has the correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(`/${pm.environment.get(\"CreatedBookId\")}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"To Kill a Mockingbird\",\n    \"author\": \"Harper Lee\",\n    \"year\": 1960\n}"
						},
						"url": {
							"raw": "{{BaseUrl}}/{{CreatedBookId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{CreatedBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update book partially with bad input",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1589791a-d9ef-4ad1-add9-3aa3091d79c7",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is the error message\", () => {",
									"    pm.response.to.have.body('Invalid request body\\n');",
									"});",
									"",
									"pm.test(\"Location header is not present\", () => {",
									"    pm.response.to.not.have.header(\"Location\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "Not json"
						},
						"url": {
							"raw": "{{BaseUrl}}/{{CreatedBookId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{CreatedBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update book partially with unused id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1589791a-d9ef-4ad1-add9-3aa3091d79c7",
								"exec": [
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is the error message\", () => {",
									"    pm.response.to.have.body('No book with that id found to update\\n');",
									"});",
									"",
									"pm.test(\"Location header is not present\", () => {",
									"    pm.response.to.not.have.header(\"Location\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"To Kill a Mockingbird\",\n    \"author\": \"Harper Lee\",\n    \"year\": 1960\n}"
						},
						"url": {
							"raw": "{{BaseUrl}}/1",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete book",
			"item": [
				{
					"name": "Delete book successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c39d847a-ad1a-47e6-af0f-8735709d630a",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is empty\", () => {",
									"    pm.response.to.have.body(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BaseUrl}}/{{CreatedBookId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{CreatedBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete book with unused id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c39d847a-ad1a-47e6-af0f-8735709d630a",
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", () => {",
									"    pm.response.to.have.body(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BaseUrl}}/1",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Upsert book",
			"item": [
				{
					"name": "Upsert book successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c413f653-ae72-430e-bab5-36b0196813f1",
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body is json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response body is an object\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData).to.not.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Response body has correct _id value\", () => {",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"CreatedBookId\"));",
									"});",
									"",
									"pm.test(\"Response body has correct bookId value\", () => {",
									"    pm.expect(jsonData.bookId).to.eql(8);",
									"});",
									"",
									"pm.test(\"Response body has correct title value\", () => {",
									"    pm.expect(jsonData.title).to.eql(\"Animal Farm\");",
									"});",
									"",
									"pm.test(\"Response body has correct author value\", () => {",
									"    pm.expect(jsonData.author).to.eql(\"George Orwell\");",
									"});",
									"",
									"pm.test(\"Response body has correct year value\", () => {",
									"    pm.expect(jsonData.year).to.eql(1945);",
									"});",
									"",
									"pm.test(\"Location header is present\", () => {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"Location header has the correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(`/${pm.environment.get(\"CreatedBookId\")}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": 8,\n    \"title\": \"Animal Farm\",\n    \"author\": \"George Orwell\",\n    \"year\": 1945\n}"
						},
						"url": {
							"raw": "{{BaseUrl}}/{{CreatedBookId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{CreatedBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upsert book with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c413f653-ae72-430e-bab5-36b0196813f1",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is the error message\", () => {",
									"    pm.response.to.have.body('The given id is not a valid id\\n');",
									"});",
									"",
									"pm.test(\"Location header is not present\", () => {",
									"    pm.response.to.not.have.header(\"Location\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": 9,\n    \"title\": \"Wuthering Heights\",\n    \"author\": \"Emily Brontë\",\n    \"year\": 1847\n}"
						},
						"url": {
							"raw": "{{BaseUrl}}/1",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d4bfe422-6aca-4875-a043-b2d2b8a74ff7",
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body is 'OK'\", () => {",
							"    pm.response.to.have.body(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/health",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3a85f30d-abc2-46f5-a334-b8a4197001b9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5c5525a2-9581-4827-bc16-c20a0b3edc1f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}